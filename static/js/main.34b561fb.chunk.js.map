{"version":3,"sources":["serviceWorker.js","MovieCard.js","SearchMovies.js","index.js"],"names":["Boolean","window","location","hostname","match","MovieCard","props","movie","className","key","id","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movies","setMovies","onSubmit","event","preventDefault","url","process","fetch","then","response","json","data","results","catch","error","console","htmlFor","type","name","placeholder","value","onChange","e","target","filter","map","Main","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCOSC,EAvBG,SAACC,GAAW,IACpBC,EAAUD,EAAVC,MACR,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAMG,IAC/B,yBACEF,UAAU,cACVG,IAAG,0DAAqDJ,EAAMK,aAC9DC,IAAKN,EAAMO,MAAQ,WAErB,yBAAKN,UAAU,iBACb,wBAAIA,UAAU,eAAeD,EAAMO,OACnC,2BACE,gDAAsBP,EAAMQ,eAE9B,2BACE,0CAAgBR,EAAMS,eAExB,uBAAGR,UAAU,cAAcD,EAAMU,aChB1B,SAASC,IAAgB,IAAD,EACXC,mBAAS,IADE,mBAC9BC,EAD8B,KACvBC,EADuB,OAETF,mBAAS,IAFA,mBAE9BG,EAF8B,KAEtBC,EAFsB,KAerC,OACE,oCACE,0BAAMf,UAAU,OAAOgB,SAbN,SAACC,GACpBA,EAAMC,iBAEN,IAAMC,EAAG,4DAAwDC,mCAAxD,iCAA8GR,EAA9G,WAETS,MAAMF,GACHG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUV,EAAUU,EAAKC,YAC9BC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,QAM9B,2BAAO5B,UAAU,QAAQ8B,QAAQ,SAAjC,iBAGA,2BACE9B,UAAU,QACV+B,KAAK,OACLC,KAAK,QACLC,YAAY,yBACZC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOvB,EAASuB,EAAEC,OAAOH,UAErC,4BAAQlC,UAAU,SAAS+B,KAAK,UAAhC,WAIF,yBAAK/B,UAAU,aACZc,EACEwB,QAAO,SAACvC,GAAD,OAAWA,EAAMK,eACxBmC,KAAI,SAACxC,GAAD,OACH,kBAAC,EAAD,CAAWA,MAAOA,EAAOE,IAAKF,EAAMG,U,IClC1CsC,E,uKAEF,OACE,yBAAKxC,UAAU,aACb,wBAAIA,UAAU,SAAd,sBACA,kBAACU,EAAD,W,GALW+B,IAAMC,WAWzBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SHkH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,a","file":"static/js/main.34b561fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst MovieCard = (props) => {\n  const { movie } = props;\n  return (\n    <div className=\"card\" key={movie.id}>\n      <img\n        className=\"card--image\"\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n        alt={movie.title + \"poster\"}\n      />\n      <div className=\"card--content\">\n        <h3 className=\"card--title\">{movie.title}</h3>\n        <p>\n          <small>RELEASE DATE: {movie.release_date}</small>\n        </p>\n        <p>\n          <small>RATING: {movie.vote_average}</small>\n        </p>\n        <p className=\"card--desc\">{movie.overview}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import React, { useState } from \"react\";\nimport MovieCard from \"./MovieCard\";\n\nexport default function SearchMovies() {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n\n  const searchMovies = (event) => {\n    event.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&query=${query}&page=1`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => setMovies(data.results))\n      .catch((error) => console.error(error));\n  };\n\n  return (\n    <>\n      <form className=\"form\" onSubmit={searchMovies}>\n        <label className=\"label\" htmlFor=\"query\">\n          Search Movies\n        </label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"Type a movie to search\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button className=\"button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"card-list\">\n        {movies\n          .filter((movie) => movie.poster_path)\n          .map((movie) => (\n            <MovieCard movie={movie} key={movie.id} />\n          ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SearchMovies from \"./SearchMovies\";\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">React Movie Search</h1>\n        <SearchMovies />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}